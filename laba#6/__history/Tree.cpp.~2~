//---------------------------------------------------------------------------


#pragma hdrstop

#include "Tree.h"
#include "Main.h"

void Tree::Insert(int X, int V)
{
	Node *NewNode  = new Node,
		 *temp     = Root,
		 *PrevNode = NULL;
	NewNode->key   = X;
	NewNode->data  = V;
	NewNode->left  = NULL;
	NewNode->right = NULL;
	int level = 0;
	char brunch = 'n';
	while (1)
	{
		if ( temp == NULL )
		{
			size++;
			temp = NewNode;
			if (level == 0)
			{
				temp->index = FMain->TreeView->Items->Add( NULL, IntToStr(X) );
				Root = temp;
				return;
			} else
			{
				temp->index = FMain->TreeView->Items->AddChild( PrevNode->index , IntToStr(X) );
				if (brunch == 'l') PrevNode->left  = temp;
				if (brunch == 'r') PrevNode->right = temp;
				return;
			}

		}
		if ( temp->key < X )
		{
			PrevNode = temp;
			temp = temp->right;
			brunch = 'r';
 			level++;
			continue;
		}
		if ( temp->key > X )
		{
			PrevNode = temp;
			brunch = 'l';
			temp = temp->left;
			level++;
			continue;
		}
		if ( temp->key == X )
		{
			temp->data = V;
			return;
		}
	}
}

void Tree::Delete(int X)
{
	if (Root == NULL) return;
	Node *temp     = Root,
		 *PrevNode = NULL,
		 *CurNode  = NULL;
	char brunch = 'n';
	while (1)
	{
		if ( temp->key < X )
		{
			PrevNode = temp;
			temp = temp->right;
			brunch = 'r';
			continue;
		}
		if ( temp->key > X )
		{
			PrevNode = temp;
			temp = temp->left;
			brunch = 'l';
			continue;
		}
		if ( temp->key == X)
		{
			if ( temp->left  == NULL
			&&   temp->right == NULL)
			{
				PrevNode->left  = NULL;
				PrevNode->right = NULL;
				delete temp;
				return;
			} else
			if ( temp->left  != NULL
			&&   temp->right != NULL)
			{
				if ( temp->right->left == NULL )
				{
					if ( brunch == 'l' )PrevNode->left = temp->right;
					if ( brunch == 'r' )PrevNode->right = temp->right;
					delete temp;
					return;
				}  else
				{
					CurNode = temp;
					while (temp != NULL)
					{
						PrevNode = temp;
						temp = temp->left;
					}
					CurNode->key     = PrevNode->key;
					CurNode->data    = PrevNode->data;
					CurNode->balance = PrevNode->balance;
					CurNode->index   = PrevNode->index;
					Delete(PrevNode->key);
					return;
				}
			} else
			{
				if ( temp->left  != NULL )
				{
					if (brunch = 'l') PrevNode->left  = temp->left;
					if (brunch = 'r') PrevNode->right = temp->left;
					delete temp;
				}
				if ( temp->right != NULL )
				{
					if (brunch = 'l') PrevNode->left  = temp->right;
					if (brunch = 'r') PrevNode->right = temp->right;
					delete temp;
				}
			}

		}
	}
}

void Tree::Print()
{
	LeftOrder(Root);
}

void Tree::LeftOrder(Node *temp)
{
	if (temp->left) LeftOrder(temp->left);
	printf("%d ", temp->data);
	if (temp->right) LeftOrder(temp->right);
}

#pragma package(smart_init)
